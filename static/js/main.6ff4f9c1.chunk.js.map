{"version":3,"sources":["components/Header.js","components/Instructions.js","components/Cats.js","components/BeforeFooter.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","id","message","score","topScore","Instructions","Cats","src","state","alt","onClick","clicky","BeforeFooter","Footer","height","width","App","List","kitty","clicked","filter","i","length","setState","shuffle","alert","array","j","Math","floor","random","temp","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k4BAqBeA,G,MAnBA,SAACC,GAAD,OACX,yBAAKC,UAAU,0BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,4BAAI,iDAER,yBAAKA,UAAU,SAASC,GAAG,WACvB,0BAAMD,UAAU,UAAUD,EAAMG,UAEpC,yBAAKF,UAAU,UACX,yCACA,0BAAMA,UAAU,SAASD,EAAMI,OAC/B,0CACA,0BAAMH,UAAU,YAAYD,EAAMK,eCNnCC,EAPM,SAACN,GAAD,OACjB,yBAAKC,UAAU,gBACX,4CACA,0GCCOM,EAJF,SAACP,GAAD,OACT,yBAAKC,UAAU,OAAOO,IAAKR,EAAMQ,IAAKN,GAAIF,EAAME,GAAIO,MAAOT,EAAMS,MAAOC,IAAI,MAAMC,QAAS,kBAAMX,EAAMY,OAAOZ,O,OCGnGa,EAJM,SAACb,GAAD,OACjB,yBAAKC,UAAU,mBCKJa,EANA,SAACd,GAAD,OACX,gDACiB,yBAAKQ,IAAI,cAAcE,IAAI,OAAOK,OAAO,OAAOC,MAAM,WCOvEZ,EAAQ,EACRC,EAAW,EA+EAY,E,2MA5EbR,MAAQ,CACNS,OACAd,MAAO,EACPC,SAAU,EACVF,QAAS,4B,EAGXS,OAAS,SAACO,GACR,IAAMD,EAAO,EAAKT,MAAMS,KAClBE,EAAUF,EAAKG,OAAO,SAAAH,GAAI,OAAIA,EAAKhB,KAAOiB,EAAMjB,KAEtD,GAAyB,MAArBkB,EAAQ,GAAGX,MAAe,CAC5B,IAAK,IAAIa,EAAI,EAAGA,EAAIJ,EAAKK,OAAQD,IAC/BJ,EAAKI,GAAGb,MAAQ,IAGlBL,EAAQ,EACR,EAAKoB,SAAS,CACZN,KAAMA,EACNd,MAAO,EACPD,QAAS,kCAIXiB,EAAQ,GAAGX,MAAQ,MAEnBL,EACYC,IACVA,EAAWD,EACX,EAAKoB,SAAS,CAAEnB,cAGlB,EAAKmB,SAAS,CACZpB,MAAOA,EACPD,QAAS,2BAEX,EAAKsB,QAAQ,CAAEP,SACf,EAAKM,SAAS,CAAEN,SAEF,KAAVd,IACF,EAAKoB,SAAS,CACZrB,QAAS,sCAEXuB,MAAM,uC,EAKZD,QAAU,SAAAE,GAER,IAAK,IAAIL,GADTK,EAAQT,GACWK,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIM,EAAIC,KAAKC,MAAMD,KAAKE,UAAYT,EAAI,IACpCU,EAAOL,EAAML,GACjBK,EAAML,GAAKK,EAAMC,GACjBD,EAAMC,GAAKI,EAEb,OAAOL,G,wEAGC,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAQvB,MAAO6B,KAAKxB,MAAML,MAAOC,SAAU4B,KAAKxB,MAAMJ,SAAUF,QAAS8B,KAAKxB,MAAMN,UACpF,kBAAC,EAAD,MACA,yBAAKF,UAAU,aACZgC,KAAKxB,MAAMS,KAAKgB,IAAI,SAAAf,GAAK,OACxB,kBAAC,EAAD,CAAMX,IAAKW,EAAMX,IAAKN,GAAIiB,EAAMjB,GAAIO,MAAOU,EAAMV,MAAOG,OAAQ,EAAKA,YAGzE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAvEUuB,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6ff4f9c1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = (props) => (\r\n    <div className=\"container-fluid header\">\r\n        <div className=\"row\">\r\n            <div className=\"col-sm\">\r\n                <h1><strong>Clicky Game</strong></h1>\r\n            </div>\r\n            <div className=\"col-sm\" id=\"updates\">\r\n                <span className=\"update\">{props.message}</span>\r\n            </div>\r\n            <div className=\"col-sm\">\r\n                <span>Score: </span> \r\n                <span className=\"score\">{props.score}</span>\r\n                <span> | Top: </span>\r\n                <span className=\"topScore\">{props.topScore}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Instructions = (props) => (\r\n    <div className=\"instructions\">\r\n        <h1>Clicky Game!</h1>\r\n        <h2>Click on an image to earn points, but don't click on any more than once!</h2>\r\n    </div>\r\n)\r\n\r\nexport default Instructions;\r\n","import React from \"react\";\r\n\r\nconst Cats = (props) => (\r\n    <img className=\"cats\" src={props.src} id={props.id} state={props.state} alt=\"cat\" onClick={() => props.clicky(props)}/>\r\n)\r\n\r\nexport default Cats;","import React from \"react\";\r\n\r\nconst BeforeFooter = (props) => (\r\n    <div className=\"before-footer\"></div>\r\n)\r\n\r\nexport default BeforeFooter;","import React from \"react\";\r\n\r\nconst Footer = (props) => (\r\n    <footer>\r\n        Clicky Game! <img src=\"logo512.png\" alt=\"logo\" height=\"30px\" width=\"30px\"/>\r\n    </footer>\r\n)\r\n\r\nexport default Footer;","//import React from 'react';\n//import logo from './logo.svg';\nimport React, { Component } from \"react\";\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Instructions from \"./components/Instructions\";\nimport Cats from \"./components/Cats\";\nimport List from \"./List.json\";\nimport BeforeFooter from \"./components/BeforeFooter\";\nimport Footer from \"./components/Footer\";\n\nlet score = 0;\nlet topScore = 0;\n\nclass App extends Component {\n  state = {\n    List,\n    score: 0, \n    topScore: 0,\n    message: \"Click an Image to Begin!\"\n  };\n\n  clicky = (kitty) => {\n    const List = this.state.List;\n    const clicked = List.filter(List => List.id === kitty.id);\n\n    if (clicked[0].state === \"1\") {\n      for (var i = 0; i < List.length; i++) {\n        List[i].state = \"0\";\n      }\n\n      score = 0;\n      this.setState({\n        List: List,\n        score: 0,\n        message: \"You guessed incorrectly!\"\n      });\n    }\n    else {\n      clicked[0].state = \"1\";\n\n      score++;\n      if (score > topScore) {\n        topScore = score;\n        this.setState({ topScore })\n      }\n\n      this.setState({\n        score: score,\n        message: \"You guessed correctly!\"\n      });\n      this.shuffle({ List });\n      this.setState({ List });\n\n      if (score === 12) {\n        this.setState({\n          message: \"Meow Chicken Meow Meow!  You won!\"\n        });\n        alert(\"Meow Chicken Meow Meow!  You won!\");\n      }\n    }\n  };\n\n  shuffle = array => {\n    array = List;\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  };\n\n  render() {\n    return (\n      <div>\n        <Header score={this.state.score} topScore={this.state.topScore} message={this.state.message}/>\n        <Instructions/>\n        <div className=\"container\">\n          {this.state.List.map(kitty => (\n            <Cats src={kitty.src} id={kitty.id} state={kitty.state} clicky={this.clicky}/>\n          ))}\n        </div>\n        <BeforeFooter/>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}